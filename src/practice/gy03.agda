{-# OPTIONS --prop --rewriting #-}

module gy03 where

open import Lib
open import NatBoolAST hiding (T)

tm1 : I.Tm
tm1 = ite true (_+o_ (num 1) (num 3)) (isZero (isZero false))
  where open I

-- FEL: do all the compulsory exercises from the book!

-- FEL: count the number of trues in a term (exercise 1.10 in the book)
Trues : Model {lzero}
Model.Tm Trues = ‚Ñï
Model.true Trues = 1
Model.false Trues = 0
<<<<<<< Updated upstream
Model.ite Trues t t' t'' = t + t' + t''
Model.num Trues n = 0
Model.isZero Trues t = t
Model._+o_ Trues = _+_
=======
Model.ite Trues m n o = m + n + o
Model.num Trues n = 0
Model.isZero Trues n = n
Model._+o_ Trues  = Œª m n ‚Üí  m + n  
>>>>>>> Stashed changes

module testTrues where
  module M = Model Trues

  t : M.Tm
  t = M.true

  t' : M.Tm
  t' = 10

  test1 : M.‚ü¶ I.false I.+o (I.num 1) ‚üß ‚â° 0
  test1 = refl -- M.‚ü¶ I.false I.+o I.num 1 ‚üß = M.‚ü¶ I.false ‚üß M.+o M.‚ü¶ I.num 1 ‚üß = M.false M.+o M.num 1 = 0 + 0 = 0
  test2 : M.‚ü¶ tm1 ‚üß ‚â° 1
  test2 = refl
  test3 : M.‚ü¶ I.ite I.true I.true I.true ‚üß ‚â° 3
  test3 = refl

  -- FEL: adj meg ket kulonbozo termet, melyek ertelmezese 2
  t2 t3 : I.Tm
  t2 = I.true I.+o I.true
<<<<<<< Updated upstream
  t3 = I.true I.+o I.isZero I.true
=======
  t3 = I.true I.+o I.false I.+o I.true
>>>>>>> Stashed changes
  t2‚â†t3 : ¬¨ (t2 ‚â° t3)
  t2‚â†t3 ()
  testt2 : M.‚ü¶ t2 ‚üß ‚â° 2
  testt2 = refl
  testt3 : M.‚ü¶ t3 ‚üß ‚â° 2
  testt3 = refl

-- FEL: number of nodes in the tree
N : Model {lzero}
N = record
      { Tm = ‚Ñï
      ; true = 1
      ; false = 1
      ; ite = Œª t t' t'' ‚Üí 1 + t + t' + t''
      ; num = Œª _ ‚Üí 1
      ; isZero = suc
      ; _+o_ = Œª t t' ‚Üí 1 + t + t'
      }
module testN where
  module N = Model N

  f : ‚Ñï ‚Üí I.Tm
  f zero = I.true
  f (suc n) = I.isZero (f n)

  flen : (n : ‚Ñï) ‚Üí N.‚ü¶ f n ‚üß ‚â° suc n
  flen zero = refl
  flen (suc n) = cong suc (flen n)

ite : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
ite zero a b = b
ite (suc _) a b = a

isZero : ‚Ñï ‚Üí ‚Ñï
isZero zero = 1
isZero (suc _) = 0

-- FEL: C stilusu modell
C : Model {lzero}
<<<<<<< Updated upstream
C = record
      { Tm = ‚Ñï
      ; true = 1
      ; false = 0
      ; ite = ite
      ; num = Œª n ‚Üí n
      ; isZero = isZero
      ; _+o_ = _+_
      }
=======
Model.Tm C = ‚Ñï
Model.true C = 1
Model.false C = 0
Model.ite C zero n o = o
Model.ite C (suc m) n o = n
Model.num C n = n
Model.isZero C zero = 1
Model.isZero C (suc n) = 0
Model._+o_ C m n = m + n
>>>>>>> Stashed changes

module testC where
  module M = Model C

  test1 : M.‚ü¶ I.false ‚üß ‚â° 0
  test1 = refl
  test2 : M.‚ü¶ I.true ‚üß ‚â° 1
  test2 = refl
  test3 : M.‚ü¶ I.ite (I.num 100) (I.num 3) (I.num 2) ‚üß ‚â° 3
  test3 = refl
  test4 : M.‚ü¶ I.ite (I.num 0) (I.num 3) (I.num 2) I.+o I.num 3 ‚üß ‚â° 5
  test4 = refl

  test5 : M.true ‚â° M.isZero (M.num 0)
  test5 = refl

-- mutasd meg, hogy true ‚â† isZero (num 0) a szintaxisban! ehhez adj
-- meg egy modellt, amiben a true tt-re, az isZero (num 0) ff-re
-- ertekelodik!
TN : Model {lzero}
TN = record
  { Tm = ùüö
  ; true = tt
<<<<<<< Updated upstream
  ; false = tt
  ; ite = Œª _ _ _ ‚Üí tt
  ; num = Œª _ ‚Üí tt
  ; isZero = Œª _ ‚Üí ff
  ; _+o_ = Œª _ _ ‚Üí tt
=======
  ; false = ff
  ; ite  = Œª m n o ‚Üí {! m  !}
  ; num = Œª { zero -> tt ; (suc n) -> ff }
  ; isZero = Œª n ‚Üí ff
  ; _+o_ = {!!}
>>>>>>> Stashed changes
  }
true‚â†isZeronum0 : ¬¨ (I.true ‚â° I.isZero (I.num 0))
true‚â†isZeronum0 e = tt‚â†ff (cong TN.‚ü¶_‚üß e)
  -- tt‚â†ff (cong TN.‚ü¶_‚üß e)          -- cong f : a ‚â° b ‚Üí f a ‚â° f b
  -- e : I.true ‚â° I.isZero (I.num 0)
  -- cong TN.‚ü¶_‚üß e : TN.‚ü¶ I.true ‚üß ‚â° TN.‚ü¶ I.isZero (I.num 0) ‚üß
  where module TN = Model TN

-- nemsztenderd modell (a szintaxis ertelmezese nem rakepzes)
NS : Model {lzero}
NS = record
       { Tm = ‚Ñï
       ; true = 2
       ; false = 0
       ; ite = Œª { zero a b ‚Üí b ; _ a b ‚Üí a }
       ; num = Œª n ‚Üí n + n
       ; isZero = Œª { zero ‚Üí 2 ; _ ‚Üí 0 }
       ; _+o_ = _+_
       }
module testNS where
  module NS = Model NS

  -- adj meg egy ‚Ñï-t, amire nem kepez egyik term sem
  n : ‚Ñï
  n = 1

  -- bizonyitsd be, hogy minden szintaktikus term ertelmezese paros szam
  ps : (t : I.Tm) ‚Üí Œ£sp ‚Ñï Œª m ‚Üí NS.‚ü¶ t ‚üß ‚â° m + m
  ps = {!!} -- KESOBB

-- FEL: add meg a legegyszerubb nemsztenderd modellt!
NS' : Model {lzero}
NS' = record
  { Tm = ùüö
  ; true = ff
  ; false = ff
  ; ite = Œª _ _ _ ‚Üí ff
<<<<<<< Updated upstream
  ; num = Œª _ ‚Üí ff
  ; isZero = Œª _ ‚Üí ff
  ; _+o_ = Œª _ _ ‚Üí ff
=======
  ; num = Œª n ‚Üí ff
  ; isZero = Œª n ‚Üí ff
  ; _+o_ = Œª m n ‚Üí ff
>>>>>>> Stashed changes
  }
module testNS' where
  module NS' = Model NS'
  b : ùüö
  b = tt

  -- indukcio
  D : DepModel {lzero}
<<<<<<< Updated upstream
  D = record
        { Tm‚àô = Œª t ‚Üí Lift (NS'.‚ü¶ t ‚üß ‚â° ff)  -- \[[            -- mk : A ‚Üî Lift A : un
        ; true‚àô = mk refl
        ; false‚àô = mk refl
        ; ite‚àô = Œª _ _ _ ‚Üí mk refl
        ; num‚àô = Œª _ ‚Üí mk refl
        ; isZero‚àô = Œª _ ‚Üí mk refl
        ; _+o‚àô_ = Œª _ _ ‚Üí mk refl
        }
=======
  DepModel.Tm‚àô D = Œª t ‚Üí Lift (NS'.‚ü¶ t ‚üß ‚â° ff)
  DepModel.true‚àô D = mk refl
  DepModel.false‚àô D = mk refl
  DepModel.ite‚àô D m n o = mk refl
  DepModel.num‚àô D = Œª n ‚Üí mk refl
  DepModel.isZero‚àô D n = mk refl
  DepModel._+o‚àô_ D m n = mk refl
>>>>>>> Stashed changes
  module D = DepModel D
  
  ‚àÄff : (t : I.Tm) ‚Üí NS'.‚ü¶ t ‚üß ‚â° ff
  ‚àÄff t = un D.‚ü¶ t ‚üß
  
  ns : (Œ£sp I.Tm Œª t ‚Üí NS'.‚ü¶ t ‚üß ‚â° tt) ‚Üí ‚ä•
  ns e = tt‚â†ff (œÄ‚ÇÇ e ‚Åª¬π ‚óæ ‚àÄff (œÄ‚ÇÅ e))
